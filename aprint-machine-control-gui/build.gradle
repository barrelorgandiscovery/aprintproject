
// Apply the java plugin to add support for Java
apply plugin: 'java'

import java.text.SimpleDateFormat

// In this section you declare where to find the dependencies of your project
repositories {
	// Use 'jcenter' for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()

}

/*
compileJava {
	options.encoding = 'iso-8859-1'
	//enable incremental compilation
	//options.incremental = true
	options.fork=true
	options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
	options.compilerArgs << "-XDignore.symbol.file"
}
*/

sourcesJar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE) 
}


// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	// compile 'org.slf4j:slf4j-api:1.7.12'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.
	implementation project(":aprint-machine-control")
	implementation project(":aprint-core")	
	
	// https://mvnrepository.com/artifact/log4j/log4j
	implementation group: 'log4j', name: 'log4j', version: '1.2.14'
	
	implementation files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
	
	final def junitJupiterGroup = 'org.junit.jupiter'
 	final def junitJupiterVersion = '5.4.0'

 	final def junitPlatformGroup = 'org.junit.platform'
 	final def junitPlatformVersion = '1.4.0'
	
	testImplementation(group: junitJupiterGroup, name: 'junit-jupiter-api', version: junitJupiterVersion)
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-engine', version: junitJupiterVersion)
    testRuntimeOnly(group: junitJupiterGroup, name: 'junit-jupiter-params', version: junitJupiterVersion)

    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-launcher', version: junitPlatformVersion)
    testRuntimeOnly(group: junitPlatformGroup, name: 'junit-platform-runner', version: junitPlatformVersion)
	
	
}

sourceSets {
	main {
		java { srcDir 'src/main/java' }
		resources {
			srcDir 'src/main/resources'
			srcDir 'src/main/java'
		}
	}

}



task fatJar(type: Jar, dependsOn: jar) {
  baseName = new SimpleDateFormat("YYYY.MM.dd").format(new Date()) + "-APrintPerfoCommander"
  def conf = configurations.runtimeClasspath
  def l = conf.findAll { !it.name.startsWith("APrint.jar") }
  def deps = l.collect { it.isDirectory() ? it : zipTree(it) }
  from(deps) {
	exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
  } with jar
  
  
  manifest {
	  attributes 'Implementation-Title': 'APrint Perfo Commander',
	  'Main-Class': 'org.barrelorgandiscovery.perfo.gui.PerfoCommander'
  }
  
}



