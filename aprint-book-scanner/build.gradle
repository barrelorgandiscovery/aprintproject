/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'use' at '08/08/18 11:07' with Gradle 2.4
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

compileJava {
                options.encoding = 'iso-8859-1'
                //enable incremental compilation
                //options.incremental = true
         		options.fork=true
		        options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
                options.compilerArgs << "-XDignore.symbol.file"
}

// In this section you declare the dependencies for your production and test code
dependencies {

    compile project(':aprint-machine-control')
	
	// see if 
	// compile project(':aprint-punch-extension')
	
	compileOnly project(':aprint-gui')
	
    compile files(fileTree(dir:"${projectDir}/libs" , 
                    include:['**/*.jar']).toList())

 	compile group: 'org.bytedeco', name: 'javacv-platform', version: '1.5.4'

	// https://mvnrepository.com/artifact/org.apache.commons/commons-math3
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'


	// compile 'org.openpnp:opencv:3.2.0-0'
	// https://mvnrepository.com/artifact/org.bytedeco/ffmpeg
	//compile group: 'org.bytedeco', name: 'ffmpeg', version: '4.1.3-1.5'
	
                    
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
			srcDir 'src/main/java'
            srcDir 'src/main/resources'
        }
    }

}



task listJars() {

   doLast {
     println "start ${projectDir}"
     
     print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList() 
   }
}

task fatJar(type: Jar, dependsOn: jar) {
  baseName = project.name + '-all'
  extension="extension"
  def conf = configurations.runtime
  def l = conf.findAll { ! (it.name.toLowerCase().startsWith("aprint-core") || it.name.toLowerCase().startsWith("aprint-gui")) }
  def deps = l.collect { it.isDirectory() ? it : zipTree(it) }
  from(deps) { 
    exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
    exclude 'version.properties'
    exclude 'extensions.properties'
    exclude 'extensionng.properties'
  } with jar
}


