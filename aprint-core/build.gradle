import java.text.*

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
	// Use 'jcenter' for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()

}

compileJava {
	options.encoding = 'iso-8859-1'
	//enable incremental compilation
	//options.incremental = true
	options.fork=true
	options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
	options.compilerArgs << "-XDignore.symbol.file"
}


configurations {
	xmlbean
}

// In this section you declare the dependencies for your production and test code
dependencies {

	compile project(':aprint-gervill')
	compile files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
	
	// https://mvnrepository.com/artifact/log4j/log4j
	compile group: 'log4j', name: 'log4j', version: '1.2.14'

	testCompile 'junit:junit:4.12'
	
	xmlbean files(fileTree(dir:"${projectDir}/libs", include:['xbean.jar','jsr173_1.0_api.jar']).toList())
}

sourceSets {
	main {
		java {  srcDir 'src/main/java'  }

		resources {
			srcDir 'src/main/java'
			srcDir 'src/main/resources'
		}
	}
	tasks {
		// java { srcDir 'srcTasksAnt/main/java' }

	}
}


task listJars() {

	doLast {
		println "start ${projectDir}"

		print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList()

	}

}

task buildSpecJar() {

	doLast {
		// <taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean" classpath="RD/xmlbean/xmlbeans-2.4.0/lib/xbean.jar:RD/xmlbean/xmlbeans-2.4.0/lib/jsr173_1.0_api.jar" />
		
		ant.taskdef(name: 'xmlbean',
		classname: 'org.apache.xmlbeans.impl.tool.XMLBean',
		classpath: configurations.xmlbean.asPath)
//		
//		<xmlbean verbose="true" destfile="lib/vbxml2016.jar" classpath="lib/xbean.jar;lib/jsr173_1.0_api.jar" failonerror="true">
//			<fileset dir="specifications">
//				<include name="VirtualBook2016.xsd" />
//			</fileset>
//		</xmlbean>
//

		ant.xmlbean(verbose: 'true',
			destfile:"${projectDir}/build/punch_specs.jar",
			failonerror:'true',
			classpath:configurations.xmlbean.asPath) {
				
				fileset(dir: 'specifications', includes: 'PunchPlan.xsd')
			
		}

	}
}


task changeVersion() { 

	inputs.files(file("src/main/resources/version.properties"))
	outputs.files(file("src/main/resources/version.properties"))
	doLast {
		def props = new Properties()
		def f = file("src/main/resources/version.properties")
		assert f.exists()
		f.withInputStream { props.load(it) }
		def storedVersion = props.getProperty("version")
		String fullstring
		String year
		String month
		String build
		(fullstring, year, month, build) = (storedVersion =~ /([0-9]+)\.([0-9]+).([0-9]+)/) [0]
		build = Integer.toString( Integer.parseInt(build) + 1 ) // increment build
		def newDate = new SimpleDateFormat('YYYY/MM/dd hh:mm').format(new Date());
		
		props.setProperty("date",newDate)
		
		props.setProperty("version", String.format("%04d.%02d.%d",Integer.parseInt(year),
																	Integer.parseInt(month),
																	Integer.parseInt(build)))
		props.save(System.out, "Software Version")
		props.setProperty("githash", getRevision())
		f.withOutputStream { props.save(it,"APrint Version") }
		
		rootProject.ext.currentVersion = props.getProperty("version")
		
		println "version modified to ${rootProject.ext.currentVersion}"
	}

}

build.dependsOn(changeVersion)
processResources.dependsOn(changeVersion)

