/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'use' at '08/08/18 11:07' with Gradle 2.4
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
	// Use 'jcenter' for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()

}

compileJava {
	options.encoding = 'iso-8859-1'
	//enable incremental compilation
	//options.incremental = true
	options.fork=true
	options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
	options.compilerArgs << "-XDignore.symbol.file"
}


configurations {
	xmlbean
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	// compile 'org.slf4j:slf4j-api:1.7.12'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.

	compile project(':aprint-gervill')
	compile files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
	testCompile 'junit:junit:4.12'
	
	xmlbean files(fileTree(dir:"${projectDir}/libs", include:['xbean.jar','jsr173_1.0_api.jar']).toList())
}

sourceSets {
	main {
		java {  srcDir 'src/main/java'  }

		resources {
			srcDir 'src/main/java'
			srcDir 'src/main/resources'
		}
	}
	tasks {
		// java { srcDir 'srcTasksAnt/main/java' }

	}
}


task listJars() {

	doLast {
		println "start ${projectDir}"

		print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList()

	}

}

task buildSpecJar() {

	doLast {
		// <taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean" classpath="RD/xmlbean/xmlbeans-2.4.0/lib/xbean.jar:RD/xmlbean/xmlbeans-2.4.0/lib/jsr173_1.0_api.jar" />
		
		ant.taskdef(name: 'xmlbean',
		classname: 'org.apache.xmlbeans.impl.tool.XMLBean',
		classpath: configurations.xmlbean.asPath)
//		
//		<xmlbean verbose="true" destfile="lib/vbxml2016.jar" classpath="lib/xbean.jar;lib/jsr173_1.0_api.jar" failonerror="true">
//			<fileset dir="specifications">
//				<include name="VirtualBook2016.xsd" />
//			</fileset>
//		</xmlbean>
//

		ant.xmlbean(verbose: 'true',
			destfile:"${projectDir}/build/punch.jar",
			failonerror:'true',
			classpath:configurations.xmlbean.asPath) {
				
				fileset(dir: 'specifications', includes: 'PunchPlan.xsd')
			
		}

	}
}
