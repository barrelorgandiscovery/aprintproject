import java.text.*


subprojects {

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'jacoco' 



    task sourcesJar(type: Jar, dependsOn: classes) {
       classifier = 'sources'
       from sourceSets.main.allSource
    }


    task javadocJar(type: Jar, dependsOn: javadoc) {
       classifier = 'javadoc'
       from javadoc.destinationDir
    }

    javadoc {
       failOnError = false

    }

    // put sources into jar
    jar {
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    java {
        reporting.baseDir = "${rootProject.buildDir.path}/reports/${project.name}"
    }
    jacocoTestReport {

        reports {
            xml.enabled = true
            csv.enabled = false
            html.enabled = true
            html.destination = file("${buildDir}/reports/jacoco/html")
        }
    }
}



def exportedProjects = [
        ":aprint-core",
	":aprint-gui",
	":aprint-machine-control",
	":aprint-punch-extension",
	":aprint-recognition-extension",
	":aprint-book-scanner",
]

task alljavadoc(type: Javadoc, dependsOn: [ ":aprint-gui:groovydoc"]) {
    options.encoding = "iso-8859-1"
    failOnError = false
    source exportedProjects.collect { project(it).sourceSets.main.allJava }    											  
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}




task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Combine all 'test' task results into a single HTML report
  reportOn subprojects.collect { it.tasks.withType(Test) }
}


rootProject.ext.execAndGetOutput = { String command ->
  try {
    def stdout = new ByteArrayOutputStream()
 
    exec {
      workingDir rootProject.projectDir
      commandLine command.split()
      standardOutput = stdout
    }
 
    return stdout.toString().trim()
  }
  catch (Exception e) {
    return null
  }
}
 
rootProject.ext.asUTC = { Date date, String format ->
  def snapshotDateFormat = new SimpleDateFormat(format)
  snapshotDateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
  return snapshotDateFormat.format(date)
}
 
rootProject.ext.getRevision = {
  String currentCommit = execAndGetOutput("git rev-parse HEAD")
  return (currentCommit != null) ? currentCommit : "UNKNOWN"
}
 
rootProject.ext.isApplicationRelease = {
  String currentBranches = execAndGetOutput("git log -n 1 --pretty=%d HEAD")
  return currentBranches.contains("master")
}

rootProject.ext.currentVersion = "UNKNOWN" 
def nsis_home = "D:\\windows\\NSIS"


// define here the bundle project
project(':bundle') {

    task copyExtensionJars(type:Copy, dependsOn: [':aprint-book-scanner:fatJar', ':aprint-punch-extension:fatJar', ':aprint-recognition-extension:fatJar']) {
        into 'offlineinstall-extensions'
        into ('Scan') {
            from project(':aprint-book-scanner').fileTree('build/libs') {
                include "*.extension"
                include "*.extensionlazy"
            }
        }
        into ('Punch') {
            from project(':aprint-punch-extension').fileTree('build/libs') {
                include "*.extension"
            }
        }
        into ('DiskAndBookRecognition') {
            from project(':aprint-recognition-extension').fileTree('build/libs') {
                include "*.extension"
            }
        }
    }


    task copyOutputJars(type:Copy,dependsOn: [':aprint-gui:fatJar', 
                            ':aprint-core:jar',':aprint-core:sourcesJar',
                            ':aprint-core:javadocJar',
                           ':aprint-gui:javadocJar',
                           ':aprint-gui:sourcesJar' ] ) {
        from project(':aprint-gui').file('build/libs')
        from project(':aprint-core').file('build/libs')
        into 'build'
    }

    task createAllJars(dependsOn: [copyOutputJars, copyExtensionJars]) {
    }

    task createNixMacBundle(type:Zip , dependsOn: [createAllJars]) {
       archiveName "nix-and-macosX.zip"
       from ('build') { include 'aprint.jar' }
       from ('offlineinstall-extensions') { include '**/*' }
       from ('maxosx-bundle') { include '**/*' }
    }

    // create installer
    task createBundles(type: Exec, dependsOn: [copyOutputJars,copyExtensionJars] ) {
        commandLine nsis_home + '\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio.nsi"
        workingDir = 'offlineinstall-studio'
    }


    // create installer
    task createBundlesSimple(type: Exec, dependsOn: [copyOutputJars,copyExtensionJars] ) {
        commandLine nsis_home + '\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio_simple.nsi"
        workingDir = 'offlineinstall-studio'
    }

    // create x64 installer
    task createInstaller(dependsOn: ['createBundles']) { 
        doLast {
            def f = file('offlineinstall-studio/APrintStudioInstall.exe')
            assert f.exists()
            assert f.renameTo(new File('build_file_x64_APrintStudioInstall_' + rootProject.ext.currentVersion + ".exe"))
        }
    }

    // create x64 installer simple
    task createInstallerSimple(dependsOn: ['createBundlesSimple']) { 
        doLast {
            def f = file('offlineinstall-studio/APrintStudioInstall.exe')
            assert f.exists()
            assert f.renameTo(new File('build_file_x64_simple_APrintStudioInstall_' + rootProject.ext.currentVersion + ".exe"))
        }
    }

    // create installer
    task createBundles32(type: Exec, dependsOn: [copyOutputJars,copyExtensionJars] ) {
        commandLine nsis_home + '\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio_32.nsi"
        workingDir = 'offlineinstall-studio'
    }


    // create installer simple
    task createBundles32simple(type: Exec, dependsOn: [copyOutputJars,copyExtensionJars] ) {
        commandLine nsis_home + '\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio_32_simple.nsi"
        workingDir = 'offlineinstall-studio'
    }

    // create x86 installer
    task createInstaller32(dependsOn: ['createBundles32']) { 
        doLast {
            def f = file('offlineinstall-studio/APrintStudioInstall32.exe')
            assert f.exists()
            assert f.renameTo(new File('build_file_x32_APrintStudioInstall_' + rootProject.ext.currentVersion + ".exe"))
        }
    }


    // create simple x86 installer
    task createInstallerSimple32(dependsOn: ['createBundles32simple']) { 
        doLast {
            def f = file('offlineinstall-studio/APrintStudioInstall32.exe')
            assert f.exists()
            assert f.renameTo(new File('build_file_x32_simple_APrintStudioInstall_' + rootProject.ext.currentVersion + ".exe"))
        }
    }

    // create zip for linux and macos
    task createMacOsAndLinuxBundle(dependsOn: ['createNixMacBundle']) {
        doLast {
         def f = file('build/distributions/nix-and-macosX.zip')
         assert f.exists()
         assert f.renameTo(new File('build_file_NixAndMacOsX_' + rootProject.ext.currentVersion + ".zip"))
        }
    }

    task createAllInstallers(dependsOn: ['createInstallerSimple', 'createInstaller', 'createInstaller32','createInstallerSimple32','createMacOsAndLinuxBundle']) {

    }
}

