import java.text.*

subprojects {

    apply plugin: 'eclipse'
    apply plugin: 'java'

    task sourcesJar(type: Jar, dependsOn: classes) {
       classifier = 'sources'
       from sourceSets.main.allSource
    }


    task javadocJar(type: Jar, dependsOn: javadoc) {
       classifier = 'javadoc'
       from javadoc.destinationDir
    }

    javadoc {
       failOnError = false 
    }

    // put sources into jar
    jar {
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}


rootProject.ext.execAndGetOutput = { String command ->
  try {
    def stdout = new ByteArrayOutputStream()
 
    exec {
      workingDir rootProject.projectDir
      commandLine command.split()
      standardOutput = stdout
    }
 
    return stdout.toString().trim()
  }
  catch (Exception e) {
    return null
  }
}
 
rootProject.ext.asUTC = { Date date, String format ->
  def snapshotDateFormat = new SimpleDateFormat(format)
  snapshotDateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
  
  return snapshotDateFormat.format(date)
}
 
rootProject.ext.getRevision = {
  String currentCommit = execAndGetOutput("git rev-parse --short HEAD")
  return (currentCommit != null) ? currentCommit : "UNKNOWN"
}
 
rootProject.ext.isApplicationRelease = {
  String currentBranches = execAndGetOutput("git log -n 1 --pretty=%d HEAD")
  return currentBranches.contains("master")
}

project(':bundle') {
    task copyOutputJars(type:Copy,dependsOn: [':aprint-gui:fatJar', ':aprint-core:jar','sourcesJar','javadocJar'] ) {
        from project(':aprint-gui').file('build/libs')
        into 'build'

        from project(':aprint-core').file('build/libs')
        into 'build'
    }
    task createBundles(type: Exec) {
        commandLine 'C:\\Program Files (x86)\\NSIS\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio.nsi"
    }
}

