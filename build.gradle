import java.text.*

subprojects {

    apply plugin: 'eclipse'
    apply plugin: 'java'

    task sourcesJar(type: Jar, dependsOn: classes) {
       classifier = 'sources'
       from sourceSets.main.allSource
    }


    task javadocJar(type: Jar, dependsOn: javadoc) {
       classifier = 'javadoc'
       from javadoc.destinationDir
    }

    javadoc {
       failOnError = false 
    }

    // put sources into jar
    jar {
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}


rootProject.ext.execAndGetOutput = { String command ->
  try {
    def stdout = new ByteArrayOutputStream()
 
    exec {
      workingDir rootProject.projectDir
      commandLine command.split()
      standardOutput = stdout
    }
 
    return stdout.toString().trim()
  }
  catch (Exception e) {
    return null
  }
}
 
rootProject.ext.asUTC = { Date date, String format ->
  def snapshotDateFormat = new SimpleDateFormat(format)
  snapshotDateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
  
  return snapshotDateFormat.format(date)
}
 
rootProject.ext.getRevision = {
  String currentCommit = execAndGetOutput("git rev-parse HEAD")
  return (currentCommit != null) ? currentCommit : "UNKNOWN"
}
 
rootProject.ext.isApplicationRelease = {
  String currentBranches = execAndGetOutput("git log -n 1 --pretty=%d HEAD")
  return currentBranches.contains("master")
}

rootProject.ext.currentVersion = "UNKNOWN" 

// define here the bundle project
project(':bundle') {

    task copyExtensionJars(type:Copy, dependsOn: [':aprint-book-scanner:fatJar', ':aprint-punch-extension:fatJar', ':aprint-recognition-extension:fatJar']) {
        into 'offlineinstall-extensions'
        into ('Scan') {
            from project(':aprint-book-scanner').fileTree('build/libs') {
                include "*.extension"
            }
        }
        into ('Punch') {
            from project(':aprint-punch-extension').fileTree('build/libs') {
                include "*.extension"
            }
        }
        into ('DiskAndBookRecognition') {
            from project(':aprint-recognition-extension').fileTree('build/libs') {
                include "*.extension"
            }
        }
    }


    task copyOutputJars(type:Copy,dependsOn: [':aprint-gui:fatJar', 
                            ':aprint-core:jar',':aprint-core:sourcesJar',
                            ':aprint-core:javadocJar',
                           ':aprint-gui:javadocJar',
                           ':aprint-gui:sourcesJar' ] ) {
        from project(':aprint-gui').file('build/libs')
        from project(':aprint-core').file('build/libs')
        into 'build'
    }
    // create installer
    task createBundles(type: Exec, dependsOn: [copyOutputJars,copyExtensionJars] ) {
        commandLine 'C:\\Program Files (x86)\\NSIS\\makensis.exe',
           "${project.projectDir}/offlineinstall-studio/aprint_studio.nsi"
        workingDir = 'offlineinstall-studio'
    }
    task createInstaller(dependsOn: ['createBundles']) { 
        doLast {
            def f = file('offlineinstall-studio/APrintStudioInstall.exe')
            assert f.exists()
            assert f.renameTo(new File('APrintStudioInstall_' + rootProject.ext.currentVersion + ".exe"))
        }
    }
}

