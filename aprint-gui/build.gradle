import java.text.*

buildscript {
    repositories {
	maven {
	 url "https://plugins.gradle.org/m2/"
	}
    }
    dependencies {
	 classpath "com.github.jengelman.gradle.plugins:shadow:5.2.0"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'com.github.johnrengelman.shadow'


// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

compileJava {
        options.encoding = 'iso-8859-1'
        //enable incremental compilation
        //options.incremental = true
        options.fork=true
        options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
        options.compilerArgs << "-XDignore.symbol.file"
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile project(':aprint-core')
    compile files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
    
    // https://mvnrepository.com/artifact/org.anarres.vfsjfilechooser/filechooser-core
	compile group: 'org.anarres.vfsjfilechooser', name: 'filechooser-core', version: '1.0.0'
    
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        groovy {
            srcDir 'src/main/groovy'
        }
        
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
			srcDir 'src/main/groovy'
        }
    }
    test {
    	java {
    		srcDir 'src/test/java'
    	}
    	resources {
    		srcDir 'src/test/resources'
    	}
    }
    
    tasks {
        java {
            srcDir 'srcTasksAnt/main/java'
        }
    }
}


task listJars() {

   doLast {
     println "start ${projectDir}"
     
     print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList()

   }

}

task fatJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar, dependsOn: jar) {

  baseName = "aprint"
  mergeServiceFiles()  
  
  from(sourceSets.main.output)

	exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
	exclude 'META-INF/*.SF'
	exclude 'META-INF/dmginfo'
        exclude 'META-INF/INDEX.LIST'

  configurations = [project.configurations.compile] 
  
  manifest {
	  attributes 'Implementation-Title': 'APrint Studio',
	     'Main-Class': 'org.barrelorgandiscovery.gui.aprintng.APrintApplicationBootStrap'
  }
}


task oldfatJar(type: Jar, dependsOn: jar) {
  baseName = "aprint"
  def conf = configurations.runtime
  def l = conf.findAll { !it.name.startsWith("aprint.jar") }
  def deps = l.collect { it.isDirectory() ? it : zipTree(it) }
  from(deps) {
	exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
  } with jar
  
  
  manifest {
	  attributes 'Implementation-Title': 'APrint Studio',
	  'Main-Class': 'org.barrelorgandiscovery.gui.aprintng.APrintApplicationBootStrap'
  }
}

