import java.text.*

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

compileJava {
        options.encoding = 'iso-8859-1'
        //enable incremental compilation
        //options.incremental = true
        options.fork=true
        options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
        options.compilerArgs << "-XDignore.symbol.file"
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile project(':aprint-core')
    compile files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        groovy {
            srcDir 'src/main/groovy'
        }
        
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
			srcDir 'src/main/groovy'
        }
    }
    tasks {
        java {
            srcDir 'srcTasksAnt/main/java'
        }
    }
}


task listJars() {

   doLast {
     println "start ${projectDir}"
     
     print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList()

   }

}


task fatJar(type: Jar, dependsOn: jar) {
  baseName = "aprint"
  def conf = configurations.runtime
  def l = conf.findAll { !it.name.startsWith("aprint.jar") }
  def deps = l.collect { it.isDirectory() ? it : zipTree(it) }
  from(deps) {
	exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
  } with jar
  
  
  manifest {
	  attributes 'Implementation-Title': 'APrint Studio',
	  'Main-Class': 'org.barrelorgandiscovery.gui.aprintng.APrintApplicationBootStrap'
  }
}

task changeVersion() { 

	inputs.files(file("src/main/resources/version.properties"))
	outputs.files(file("src/main/resources/version.properties"))
	doLast {
		def props = new Properties()
		def f = file("src/main/resources/version.properties")
		assert f.exists()
		f.withInputStream { props.load(it) }
		def storedVersion = props.getProperty("version")
		String fullstring
		String year
		String month
		String build
		(fullstring, year, month, build) = (storedVersion =~ /([0-9]+)\.([0-9]+).([0-9]+)/) [0]
		build = Integer.toString( Integer.parseInt(build) + 1 ) // increment build
		def newDate = new SimpleDateFormat('YYYY/MM/dd hh:mm').format(new Date());
		
		props.setProperty("date",newDate)
		props.setProperty("version", "$year.$month.$build")
		props.save(System.out, "Software Version")
		props.setProperty("githash", getRevision())
		f.withOutputStream { props.save(it,"APrint Version") }
		
		rootProject.ext.currentVersion = props.getProperty("version")
		
		println "version modified to ${rootProject.ext.currentVersion}"
	}

}

build.dependsOn(changeVersion)
processResources.dependsOn(changeVersion)


