
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
	// Use 'jcenter' for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()

}

compileJava {
	options.encoding = 'iso-8859-1'
	//enable incremental compilation
	//options.incremental = true
	options.fork=true
	options.forkOptions.executable =  System.getenv('JAVA_HOME') + File.separator + "bin" + File.separator + "javac"
	options.compilerArgs << "-XDignore.symbol.file"
}


processResources {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE) 
}

sourcesJar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE) 
}



// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	// compile 'org.slf4j:slf4j-api:1.7.12'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.

	compileOnly project(':aprint-gui')
	implementation project(':aprint-machine-control')
	implementation files(fileTree(dir:"${projectDir}/libs" , include:['**/*.jar']).toList())
	testImplementation 'junit:junit:4.12'
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'dxfplugin'
			//            srcDir 'machine-control'
		}
		resources {
			srcDir 'src/main/java'
			srcDir 'src/main/resources'
		}
	}

}



task listJars() {

	doLast {
		println "start ${projectDir}"

		print fileTree(dir: "${projectDir}/libs", include:['**/*.jar']).toList()

	}

}


task fatJar(type: Jar, dependsOn: [jar, ":aprint-machine-control:jar"]) {
  baseName = project.name + '-all'
  extension="extension"
  def conf = configurations.runtimeClasspath
  def l = conf.findAll { ! (it.name.toLowerCase().startsWith("aprint-core") || it.name.toLowerCase().startsWith("aprint-gui")) }
  def deps = l.collect { it.isDirectory() ? it : zipTree(it) }
  from(deps) { 
    exclude 'META-INF/MANIFEST.MF'
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.PF'
    exclude 'version.properties'
    exclude 'extensions.properties'
    exclude 'extensionng.properties'
  } with jar
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE) 
}



test {

 useJUnitPlatform()

}
